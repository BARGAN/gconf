2000-01-20  Havoc Pennington  <hp@pobox.com>

	* backends/xml-entry.c (node_extract_value): Detect case where a
	pair is missing car and/or cdr and do an error instead of
	returning an invalid pair.

	* gconf/gconf-internals.c (gconf_get_lock): remove IOR debug spew

	* gconf/gconftool.c: Add --break-key and --break-directory, these
	allow you to easily torture test your application and see if
	you're robust against users setting your config keys to stupid
	stuff.

	* tests/testgconf.c: Include the empty string in the list 
	of strings we test. I know this is currently broken if you 
	exit gconfd or purge the cache between set and get.
	
2000-01-20  Havoc Pennington  <hp@redhat.com>

	* gconf/Makefile.am (EXTRA_DIST): fix EXTRA_DIST to have
	default.path.in in it

2000-01-20  Havoc Pennington  <hp@redhat.com>

        * gconf/default.path: remove, replace with gconf/default.path.in
	which is set up properly to go in $sysconfdir
	
	* gconf/gconftool.c (main): Always unref the engine when we're
	done, to ensure we cleanly give up locks on local sources.

	* configure.in (GCONF_CONFIG_SOURCE): --enable-gconf-source option

	* gconf/gconftool.c (main): add an --makefile-install-rule option,
	which does the right thing in makefile install rules.	

        * Makefile.am: add standard-schemas subdir
	
	* configure.in (absolute_top_srcdir): create standard-schemas Makefile

	* standard-schemas/desktop.schemas: Schemas that any desktop can use

	* standard-schemas/Makefile.am: install schemas

2000-01-19  Havoc Pennington  <hp@redhat.com>

	* gconf/gconfd.c (gconf_set_exception): warn if the error is set
	to GCONF_ERROR_SUCCESS

	* gconf/gconf-error.h: Prefix all errno values with GCONF_ERROR as
	Owen suggested

2000-01-15  Havoc Pennington  <hp@pobox.com>

	* tests/testlisteners.c (check_immediate_remove_after_add): update 
	to match change to gconf-listeners.c

	* gconf/gconf-listeners.c: Use only 24 bits for the array index,
	and put a variable value in the top 8 bits, so recycling array
	indices doesn't create the possibility of clients clashing with
	each other (i.e. to clients it doesn't appear that indexes are
	being recycled).	

2000-01-15  Havoc Pennington  <hp@pobox.com>

	* backends/xml-dir.c (dir_unset_value): check entries for 
	uselessness on unset, even if they are unchanged by the unset.
	Allows us to delete useless crap we loaded from disk.
	If you unset, the entry should no longer appear in all_entries
	unless there's a schema name to remember.
	
	* backends/xml-entry.c (entry_unset_value): Fix this to properly
	unset value for all locales if the locale passed in to "unset" is
	NULL
	(entry_sync_to_node): Remember to unset the value if necessary
	
	* gconf/gconftool.c (list_pairs_in_dir): handle entries with no
	value.

2000-01-15  Havoc Pennington  <hp@pobox.com>

	* backends/xml-dir.c (dir_destroy): destroy entries before the xml
	doc, since they hold pointers into the xml doc.

	* backends/xml-entry.c (entry_sync_to_node): if no cached value,
	blow away the value in the node.

2000-01-14  Havoc Pennington  <hp@pobox.com>

	* gconf/gconfd.c (gconfd_all_entries): remove bad assertion that 
	the value in an entry was non-NULL

	* gconf/gconf.c (gconf_set): check for invalid list type

	* gconf/gconf-internals.c (gconf_value_from_corba_value): Be more 
	paranoid about list types coming from gconfd

2000-01-13  Havoc Pennington  <hp@pobox.com>

	* gconf/gconf.c (gconf_unique_key): function to generate
	a pseudo-random very-very-likely-to-be-unique key name.

2000-01-13  Havoc Pennington  <hp@redhat.com>

	* gconf/gconf-internals.c (gconf_concat_key_and_dir): move
	declaration to public header

	* doc/gconf/tmpl/gconf-client.sgml: Document the changed
	dir add/remove behavior

2000-01-13  Havoc Pennington  <hp@redhat.com>

	* backends/xml-dir.c (dir_load): arguments to this were backward

	* wrappers/gtk/gconf-client.c: keep a count of the number of times
	a directory has been added/removed from the dir list, so we only 
	remove it from the list after that number of removals.
	Perhaps somewhat unintuitive, but we'll document it, and it's 
	really necessary if multiple code sections are going to share the 
	same GConfClient.
	(gconf_client_destroy): move a bunch of stuff to finalize
	so we remain "safe" before last unref

2000-01-12  Havoc Pennington  <hp@redhat.com>

	* gconf/gconfd.c (main): don't use custom object ID

2000-01-12  Jonathan Blandford  <jrb@redhat.com>

	* wrappers/gtk/gconf-client.c: #include <stdio.h>

2000-01-11  Havoc Pennington  <hp@pobox.com>

	* gconf.m4: separate $4 from gconf_config_args

	* gconf-config.in (af_libs): -lgconf, not -lgconf-client
	(Libraries): add gconf-gtk lib

2000-01-11 Andreas Hyden <andreas.hyden@telia.com>

	* configure.in : added sv (swedish)

2000-01-08  Havoc Pennington  <hp@pobox.com>

	* gconf/gconftool.c (main): had local and non-local cases backward
	so you got the opposite of what you requested

	* gconf/gconf-internals.c (gconf_release_lock): include strerror()
	in "can't open lock file" message
	(gconf_get_lock): actually write the PID to the lock file,
	and use ConfigServer_ping() instead of CORBA_Object_is_nonexistent()

2000-01-07  Havoc Pennington  <hp@redhat.com>

	* gconf/gconf-internals.c (gconf_get_lock): totally rewrite the
	locking stuff

	* backends/xml-dir.c (dir_load): if errno == ENOENT don't make
	dir_load() fail

	* gconf/gconfd.c (main): check return value of
	oaf_active_server_register() and act accordingly.

	* gconf/gconf.c (try_to_contact_server): use new
	OAF_FLAG_EXISTING_ONLY when appropriate	

	* gconf/gconf-internals.c (gconf_set_daemon_ior): allow setting
	IOR to a global var

	* gconf/gconfd.c (main): set the IOR so it can be used in lockfiles

2000-01-03  Havoc Pennington  <hp@redhat.com>

	* gconf/gconftool.c (main): add support for direct config source access

1999-12-31  Havoc Pennington  <hp@pobox.com>

	* gconf/gconf-internals.c (gconf_log): in non-daemon mode, use
	fprintf() when it's an error and printf() when not
	(gconf_in_daemon_mode): new function

	* gconf/gconfd.c (signal_handler): special-case some more signals;
	do more thorough cleanup when we can.
	(main): fix which signals we add an action for

	* gconf/gconf-internals.h: Remove server_info* functions

	* gconf/gconf-error.h: add GCONF_LOCK_FAILED

	* gconf/gconf.c (corba_errno_to_gconf_errno): lock failed error

	* gconf/gconf-internals.c (gconf_nanosleep): Add utility function
	to portably sleep a little while (we should really stick one of
	these in glib)
	(gconf_release_lock, gconf_get_lock): Lock directory functions

2000-01-02  Timur Bakeyev <mc@bat.ru>

	* doc/gconf/Makefile.am: Replace unportable install -d with $MKINSTALLDIRS.
	install -m 0644 - with $(INSTALL_DATA).

2000-01-02  Timur Bakeyev <mc@bat.ru>

	* po/uk.po: Add missed "\n" in 2 strings. Things sholud be checked 
	before commit :)
	
	* backends/Makefile.am, wrappers/gtk/Makefile.am: Add $(top_builddir)/gconf
	to INCLUDES to make GConf.h visiable.

	* gconf/gconf-internals.c: If LC_MESSAGE doesn't exist, use value of
	LC_CTYPE (is this correct?)
		
>>>>>>> 1.102
1999-12-31  Yuri Syrota  <rasta@renome.rovno.ua>

	* configure.in: Added "uk" to ALL_LINGUAS

1999-12-30  Havoc Pennington  <hp@pobox.com>

	* backends/xml-backend.c: Complete cleanup of XML backend, 
	all test suite passes, code is much more manageable.

1999-12-21  Havoc Pennington  <hp@redhat.com>

	* doc/gconf/tmpl/gconf-backend.sgml: Documented the methods in the
	backend vtable.

	* backends/xml-dir.[hc], backends/xml-entry.[hc]: fixed up some
	code, mostly done.	

1999-12-20  Havoc Pennington  <hp@redhat.com>

	* gconf/gconf-sources.c (gconf_sources_new_from_addresses): const
	correctness

	* gconf/gconfd.c: Massive const-correctness changes to match
	latest ORBit

	* gconf/gconf.c (notify): "in string" seems to be const again now.

	* wrappers/gtk/gconf-client.c (cache_pairs_in_dir): store the
	is_default parameter when preloading

	* gconf/gconf.c (gconf_all_entries): receive the is_default
	parameter

	* gconf/gconfd.c (gconfd_all_entries): pass the is_default
	parameter over the CORBA link

	* backends/xml-backend.c (listify_foreach): Add the schema name to
	the entry if appropriate (if value is unset)

	* gconf/gconf-sources.c (gconf_sources_all_entries): Change to
	match new semantics of all_entries in the backend; get all entries
	that have a schema set on them, and the corresponding default 
	value if appropriate.

	* gconf/gconf-value.c (gconf_entry_set_is_default): new function
	(gconf_entry_set_schema_name): new function

	* backends/xml-backend.c (listify_foreach): Include keys that
	exist but have no value set in the list of returned entries.

1999-12-20  Havoc Pennington  <hp@redhat.com>

	* tests/testlisteners.c: fix include

	* wrappers/gtk/gconf-client.c (gconf_client_preload): Actually
	implement preloading. We have some "issues" here to resolve I
	think, because of the defaults stuff and schemas.
	
1999-12-14  Havoc Pennington  <hp@redhat.com>

	* gconf/gconf.c (gconf_engine_new_from_address): Add a g_warning()
	that people probably don't want to use this.

1999-12-14  Havoc Pennington  <hp@redhat.com>

	* doc/gconf/tmpl/gconf-client.sgml: fix a typo, add additional
	explanation to the introduction.

	* doc/gconf/tmpl/gconf.sgml: Document the string-to-enum functions.
	Update some other docs too.

	* doc/gconf/gconf-sections.txt: add new functions

	* gconf/gconf.c (gconf_string_to_enum): new function
	(gconf_enum_to_string): new function

	* gconf/gconf-engine.h: Put gconf_engine_new_local() here instead
	of gconf-internals.h

	* gconf/gconf-internals.h: added a new GCONF_ENABLE_INTERNALS
	define, to allow us to have internal stuff in headers other than
	gconf-internals.h

	* gconf/gconf.c (gconf_unset): local version
	(gconf_associate_schema): local version
	(gconf_all_entries): local version
	(gconf_all_dirs): local version
	(gconf_suggest_sync): local version
	(gconf_dir_exists): local version

	* gconf/gconf-internals.h (gconf_engine_new_local): Declare this
	function here, though it's defined in gconf.c

	* gconf/gconf.c (gconf_set): local version

	* gconf/gconfd.c (context_query_default_value): use
	gconf_sources_query_default_value()

	* gconf/gconf-sources.c (gconf_sources_query_default_value): New
	function

	* gconf/gconf-sources.h: egtk-format-protos the function
	prototypes.

	* gconf/Makefile.am (libgconf_la_SOURCES): move gconf-locale.[hc]
	into the library, bah

	* gconf/gconf.c (gconf_get_full): Add local (no gconfd) version

	* gconf/gconf-locale.c (gconf_split_locale): locale splitter
	function.

	* gconf/gconf-sources.c (gconf_sources_new_from_source): new function

	* examples/basic-gconf-app.c (create_prefs_dialog): Move keys from
	/apps/gnome to plain /apps

	* doc/gconf/gconf.sgml: Add an initial stab at namespace
	splitting.

1999-12-09  Havoc Pennington  <hp@redhat.com>

	* gconf/gconf.c (gconf_init): Safety check to ensure we don't
	initialize OAF a second time.

1999-12-06  Havoc Pennington  <hp@pobox.com>

	* gconf/gconf.c (gconf_notify_add): Backward assertion

1999-12-02  Havoc Pennington  <hp@pobox.com>

	* examples/basic-gconf-app.c (create_configurable_widget): use
	gconf_client_get_string() instead of gconf_client_get()
	(update_entry): Check for the default value if we have an unset
	value in the change set.	

	* wrappers/gtk/gconf-client.c
	(gconf_client_create_change_set_from_currentv): use without_default
	(revert_foreach): use without_default

	* gconf/gconf-changeset.c (gconf_create_change_set_from_currentv):
	use gconf_get_without_default()
	(revert_foreach): use gconf_get_without_default()

	* wrappers/gtk/testgconfclient.c (entry_notify_func): fix to compile

	* examples/basic-gconf-app.c (configurable_widget_config_notify):
	fix to compile

	* wrappers/gtk/gconf-client.c
	(gconf_client_get_default_from_schema): New function

	* gconf/gconf.c (gconf_get_without_default): renamed from
	gconf_get_no_default(), so that gconf_get_default_from_schema()
	won't be as confusing maybe.
	(gconf_get_default_from_schema): new function to read the default
	setting in the schema

	* backends/xml-backend.c (xentry_extract_value): remove ignore_subsequent
	(xentry_set_value): ditto

	* gconf/gconf-sources.c (gconf_sources_query_value): Remove ignore
	subsequent

	* gconf/gconf-value.c (gconf_value_new_from_string): remove
	ignore_subsequent
	(gconf_value_to_string): remove ignore_subsequent
	(gconf_value_copy): Remove ignore_subsequent

	* gconf/gconfd.c (context_unset): add is_default to notification
	(context_set): add is_default to notification

	* gconf/gconf-internals.c (gconf_value_type_to_string): Remove
	ignore_subsequent. 

	* gconf/gconf.c (gconf_cnxn_notify): add is_default
	(notify) add is_default

	* gconf/gconf-value.h: Remove GCONF_VALUE_IGNORE_SUBSEQUENT

	* gconf/gconf-sources.c (gconf_sources_unset_value): don't do that
	weird IGNORE_SUBSEQUENT goo

	* wrappers/gtk/Makefile.am (INCLUDES): add top_builddir to include
	search to get the built sources

	* gconf/gconf-engine.h: fix includes

	* gconf/gconf-changeset.h: fix includes

	* gconf/Makefile.am (gconfd_SOURCES): add gconf-sources.h here
	instead of installing it.

	* wrappers/gtk/Makefile.am (INCLUDES): remove -I$(top_builddir)/gconf

	* wrappers/gtk/gconf-client.c (gconf_client_get_full): Add this,
	etc.

	* gconf/gconf-sources.c (gconf_sources_query_value): Set a flag
	indicating whether the retrieved value was the default or not.

	* gconf/GConf.idl: add value_is_default out flag to
	lookup_with_locale()

1999-12-02  Havoc Pennington  <hp@pobox.com>

	* gconf/gconf-error.c: Was missing an element in the err_msgs
	array and the array had the wrong size.
	
	* gconf/gconf-sources.c (gconf_sources_query_value): Add
	use_schema_default flag here (and in the other stuff that calls
	it, I'm skipping some layers in the changelog)
	(gconf_sources_query_value): If we find an IGNORE_SUBSEQUENT, we
	should return immediately, rather than checking the schema default.

	* gconf/gconfd.c (gconfd_lookup_with_locale): fix
	
	* gconf/gconf.c (gconf_get_no_default): new function to get
	a value, but not fall back to the schema default.

	* gconf/GConf.idl: lookup_with_locale() needs to raise
	ConfigException. Also, add a "use schema default" flag.

1999-12-01  Havoc Pennington  <hp@pobox.com>

	* gconf/gconf.c: Add local "direct mode" engine; mildly bad hack.
	This file could use some modularization. Still have to make
	all the methods support the local version.
	
	* gconf/Makefile.am (libgconf_la_SOURCES): move gconf-sources.c to
	the library instead of gconfd (again).

	* gconf/gconf-internals.c (gconf_handle_oaf_exception): set the
	GCONF_OAF_ERROR errno
	
	* gconf/gconf-error.c: add strerror stuff for those errors.

	* gconf/gconf-error.h: add oaf error and "this is not a gconfd
	engine" error.

1999-12-01  Havoc Pennington  <hp@pobox.com>

	* gconf/gconf.c (try_to_contact_server): handle OAF exceptions

	* gconf/gconf-internals.c (gconf_handle_oaf_exception): new
	function to handle OAF CORBA exceptions, now I have to find all
	the places that I need to use this function...

1999-12-01  Havoc Pennington  <hp@pobox.com>

	* doc/gconf/gconf-sections.txt: Add new create_change_set
	functions for GConfClient and GConfEngine

	* doc/gconf/Makefile.am (LDFLAGS): Use proper cflags/ldflags 
	for gtk and OAF when doing 'make scan'

	* wrappers/gtk/testgconfclient.c (entry_attached_to): change for
	new get_string() thing

	* gconf/gconf-changeset.h: fix the "" vs. <> issue on an #include

	* wrappers/gtk/gconf-client.c (gconf_client_get_bool): remove
	"default" argument
	(gconf_client_get_string): ditto
	(gconf_client_get_int): ditto
	(gconf_client_get_float): ditto

	* gconf/gconf.c (gconf_get_bool): Remove "default" argument.
	(gconf_get_string): ditto
	(gconf_get_int): ditto
	(gconf_get_float): ditto

1999-11-30  Havoc Pennington  <hp@pobox.com>

	* backends/xml-backend.c (resolve_address): s/dir/root_dir/

1999-11-29  Havoc Pennington  <hp@pobox.com>

	* gconf/gconftool.c (do_load_schema_file): Use new syntax for
	attaching schema names to key names

	* backends/xml-backend.c (resolve_address): Create the XML root
	directory if necessary.

1999-11-29  Havoc Pennington  <hp@pobox.com>

	* wrappers/gtk/gconf-client.c (gconf_client_get): sheesh, this
	stupid function didn't work at all. fix it
	(get): properly check whther val is NULL before copying it.

	* gconf/gconf-internals.c (gconf_set_daemon_mode): Function to set
	daemon mode, for now changes gconf_log behavior
	(gconf_log): handle daemon vs. non-daemon mode, and with syslog do
	syslog(pri, "%s", msg) instead of syslog(pri, msg) to avoid
	unwanted printf magic.	
	(gconf_value_from_corba_value): more robust for list types, add an assertion

	* gconf/gconfd.c (gconfd_set): return if the conversion from
	GConfValue doesn't fly

	* gconf/gconf-value.c (gconf_value_new): add a check for valid type

	* gconf/gconf-value.h (GCONF_VALUE_TYPE_VALID): Add macro to check the
	a value type is valid

	* gconf/gconf-changeset.c (change_set): return if the value being
	set is the same as the existing value.

	* examples/Makefile.am (EFENCE): add EFENCE var

	* wrappers/gtk/gconf-client.c (gconf_client_commit_change_set):
	add checks

	* gconf/gconf-changeset.c (gconf_commit_change_set): add checks

	* gconf/gconf-listeners.c (gconf_listeners_remove): Robust against
	bad notify_id

	* gconf/gconf-changeset.c (gconf_create_change_set_from_current):
	New function to create a change set which will restore the current
	values of a list of keys.
	(gconf_create_change_set_from_currentv): Vector version of the
	same function.
	(gconf_change_set_check_value): new function to check for and get 
	the value of a key in a change set.

	* wrappers/gtk/gconf-client.h: Add client analogues for the above
	two set-creation functions.
	
1999-11-28  Havoc Pennington  <hp@pobox.com>

	* gconf.m4: add the "" around the $4, seems to work - the problem
	here seems to have something to do with aclocal or autoconf
	doing the wrong thing, rather than a shell issue. I don't
	understand it yet.

1999-11-23  Havoc Pennington  <hp@pobox.com>

	* backends/xml-backend.c (query_value): Don't return errors here; 
	this is somewhat wrong, we actually need to discriminate between
	errors and report the "abnormal" ones, but for now I think all of
	them are ignorable.

	* gconf/gconf-internals.c (gconf_log): If the log string contains
	a % escape it with another percent so we don't get printf()
	effects (was causing a segfault) - however it's still broken if
	unintentional percents exist in the initial format string. Will
	fix later by adding a "printf()-formatting" arg I think

	* wrappers/gtk/gconf-client.c (gconf_client_commit_change_set):
	put some casts in to chill warnings

	* gconf/gconf-changeset.c (gconf_change_set_size): new function

	* wrappers/gtk/gconf-client.c (gconf_client_destroy): Destroy the
	directory list.

	* Makefile.am (SUBDIRS): add "examples" directory

	* examples/Makefile.am, examples/basic-gconf-app.c: Examples;
	write nice example program.
	
	* gconf/gconfd.c (notify_listeners_cb): error message improvement
	(set_default_context): Set the "context" field of the default
	context, I don't get how that was working before.	

1999-11-23  Havoc Pennington  <hp@pobox.com>

	* wrappers/gtk/testgconfclient.c: remove GNOME dependency

	* configure.in: don't build gconf-editor makefile.

	* Makefile.am (SUBDIRS): never build gconf-editor, it will have to
	go in a separate module (somewhat inconveniently, since I'll
	probably end up installing gconf-internals.h for its use, blah)

	* configure.in (GCONF_AGE): Check for plain GTK not GNOME

	* wrappers/Makefile.am (SUBDIRS): change GNOME conditional to GTK

1999-11-23  Havoc Pennington  <hp@pobox.com>

	* gconf/Makefile.am (libgconf_la_LDFLAGS): split off LIBADD

	* wrappers/gtk/Makefile.am (libgconf_gtk_la_LIBADD): set shared
	lib version
	(libgconf_gtk_la_LDFLAGS): split LIBADD and LDFLAGS maybe properly.

	* configure.in: remove gnorba cflags/libs

	* gconf/Makefile.am (install-data-local): Create the
	$(sysconfdir)/gconf directory.

	* wrappers/Makefile.am: For now, always disable Guile wrapper
	build.

1999-11-22  Havoc Pennington  <hp@pobox.com>

	* backends/xml-backend.c (resolve_address): Check whether the XML
	directory is readable/writeable and report an error if neither;
	set readable/writeable flags properly.

	* gconf/gconfd.c (gconf_server_load_sources): log decision to use
	default config source

1999-11-22  Havoc Pennington  <hp@pobox.com>

	* gconf/gconfd.c (gconf_server_load_sources): Fall back to
	xml:~/.gconf if no config file is found

1999-11-22  Havoc Pennington  <hp@pobox.com>

        * gconf/default.path: default configuration file
	
	* gconf/Makefile.am (install-data-local): Install default.path to
	sysconfdir/gconf/path (theoretically)

1999-11-22  Havoc Pennington  <hp@pobox.com>

	* gconf/gconfd.c (gconf_set_exception): lots of assertions
	(gconf_server_load_sources): Install the default context even if
	we don't find any configuration sources in the path

	* gconf/gconf.c (gconf_get_config_server): always return an error
	if the server isn't available. This is still not doing the right
	thing; for shutdown and ping we need to be able to get the object
	if and only if it already exists. This feature is also needed for
	something like magicdev-patched gtcd.

	* gconf/gconfd.c (gconf_server_load_sources): #ifdef the
	debug-only search for debugging path file.

1999-11-19  Havoc Pennington  <hp@pobox.com>

	* gconf/gconfd.c (gconf_server_load_sources): Give actual
	sysconfdir in the error message, not just /etc;
	include liboaf.h

	* gconf/gconf.c: include liboaf.h
	(gconf_postinit): fix a bunch of missing semicolons

1999-11-20  Havoc Pennington  <hp@pobox.com>

	* wrappers/gtk/gconf-client.c
	(gconf_client_create_reverse_change_set): new function
	(gconf_client_commit_change_set): new function

1999-11-20  Havoc Pennington  <hp@pobox.com>

	* gconf/gconf-changeset.c (gconf_create_reverse_change_set): New
	function creates a change set which will revert another change set
	on commit.

1999-11-19  Havoc Pennington  <hp@pobox.com>

	* gconf/gconfd.c (gconf_server_load_sources): Give actual
	sysconfdir in the error message, not just /etc;
	include liboaf.h

	* gconf/gconf.c: include liboaf.h
	(gconf_postinit): fix a bunch of missing semicolons

1999-11-19  Havoc Pennington  <hp@pobox.com>

	* gconf/gconf.c (gconf_server_broken): don't need to set the
	server to NIL here, it gets set in gconf_detach_config_server()

	* doc/gconf/gconf-sections.txt: Add preinit, postinit

	* doc/gconf/gconf.sgml: Remove gconf-orbit entity

	* doc/gconf/gconf-sections.txt: Remove gconf-orbit stuff

        * tests/*.c: Fix to not include gconf-orbit.h, call gconf_init()
	properly
	
	* gconf-editor/gconf-editor.c: don't include gconf-orbit.h

	* wrappers/gtk/testgconfclient.c (main): remove "orb" variable

	* gconf/gconftool.c: don't include gconf-orbit.h

	* gconf/gconfd.c: don't include gconf-orbit.h

	* gconf/gconf.c: don't include gconf-orbit.h

	* gconf/gconf.h: don't include gconf-orbit.h

	* gconf/Makefile.am (gconfinclude_HEADERS): remove gconf-orbit.h
	(libgconf_la_SOURCES): remove gconf-orbit.c

	* gconf/gconfd.c (main): fix error message if oaf_init() returns FALSE

	* gconf/gconf.c (try_to_contact_server): Use the IID macro
	(gconf_postinit): Change all the error checks to assertions; if
	these errors can really happen they need to be reported as before
	(not sure how to do this with the pre/post init setup), if they
	can't happen then they should be asserted, not error-checked.

	* gconf/gconfd.c (fast_cleanup): Unregister with OAF in order to
	clean up.

	* gconf/Makefile.am: add -DIID to INCLUDES

	* gconf/gconfd.c (main): Use a macro for the IID

	* gconf/gconf-internals.c: Remove gconf_read_server_ior(),
	gconf_info_dir(), gconf_info_file(), etc. since we use OAF instead.

	* gconf/gconfd.c (main): Remove "nodaemon" flag since we don't run
	as a daemon anymore.
	(main): After oaf_init(), don't try to use "err" since oaf_init()
	won't set it.

        * gconf/gconf-orbit.h, gconf/gconf-orbit.c: Delete these, we 
	are using OAF now.
	
	* gconf/gconf.c (gconf_get_config_server): Change this to only
	call try_to_contact_server() if start_if_not_found is TRUE, 
	since with OAF any attempt to contact the server will 
	automatically restart it. Now we keep the server variable 
	up-to-date locally (set it to NULL on any system exception).

1999-11-19  Elliot Lee  <sopwith@redhat.com>

	* Make it all use OAF, and redo the initialization routine(s) to
	fit better into the GnomeModuleInfo system.

1999-11-18  Elliot Lee  <sopwith@redhat.com>

	* gconf.m4: AM_PATH_GCONF macro.
	
	* wrappers/gtk/Makefile.am, autogen.sh, backends/Makefile.am: Work with builddir != srcdir

	* Makefile.am: Distribute gconf.m4 & gconf-config.in, install gconf.m4

1999-11-18  Havoc Pennington  <hp@pobox.com>

	* gconf/gconfd.c (gconf_server_load_sources): fix the message
	about writeable sources

1999-11-18  Havoc Pennington  <hp@pobox.com>

	* backends/xml-backend.c (find_schema_subnode_by_locale): Check
	that locale && this_locale before strcmp()'ing them
	(entry_unset): take a NULL locale in unset to mean "unset all locales"

	* tests/testschemas.c (check_one_schema): fix the locale-related tests

	* gconf/gconf.c (gconf_set_schema): remove debug spew

	* gconf/gconf-internals.c (gconf_schema_from_corba_schema): parse
	the encoded default value
	(fill_corba_schema_from_gconf_schema): encode the default value to
	ship to the server.

	* gconf/GConf.idl: Add encoded default value string to
	ConfigSchema struct

	* gconf/gconf-internals.c (gconf_value_decode): implement
	(gconf_value_encode): implement

	* gconf/gconf-value.c (gconf_value_to_string): Use
	g_strdup_printf() to create int/float strings, rather than
	guessing at the needed string size.

1999-11-17  Havoc Pennington  <hp@pobox.com>

	* tests/testencode.c: new test for string quoting

	* gconf/gconf-internals.c (gconf_unquote_string_inplace): new
	function unquotes a string
	(gconf_quote_string): quotes a string
	(gconf_unquote_string): unquotes a const string

1999-11-16  Havoc Pennington  <hp@pobox.com>

	* gconf/gconf-schema.c (gconf_schema_copy): copy locale, and
	handle NULL fields. Sheesh this was broken.
	(gconf_schema_destroy): destroy default value and locale

1999-11-16  Havoc Pennington  <hp@pobox.com>

	* gconf/gconf-value.c (gconf_value_to_string): print more info
	about schemas

	* backends/xml-backend.c (xentry_set_schema_value): Set the schema
	type on the toplevel node, not the localized node.
	(xentry_set_schema_value): Set the owner on the toplevel node
	(schema_node_extract_value): Do better at falling back to any
	schema if the locale we want isn't found.
	(my_xmlSetProp): Replace xmlSetProp with this, deletes the prop
	if setting to NULL or ""
	(my_xmlGetProp): Replace xmlGetProp with this, returns NULL if the 
	prop has an empty value.

	* gconf/gconf-internals.c (gconf_value_type_to_string): Add case
	for GCONF_VALUE_INVALID

	* backends/xml-backend.c (entry_unset): refill cached_value if
	other locale values still exist. Also, mark the Entry dirty.
	(entry_value): add a sync_if_needed here
	(entry_sync_if_needed): just always sync if it's a schema; this
	code is so broken we may as well not try to be clever.	

1999-11-15  Havoc Pennington  <hp@pobox.com>

	* backends/xml-backend.c (entry_fill): handle locale by syncing
	cached value if necessary 
	
	* wrappers/gtk/gconf-client.c (gconf_client_get_string):
	g_strdup() the retval if necessary
	(gconf_client_get_pair): fix one of the checks

	* backends/xml-backend.c (xentry_extract_value): use "C" locale if
	none is given.

	* gconf/gconftool.c (do_load_schema_file): check type of nodes
	(process_key_list): check node type
	(process_schema): check node type
	(process_locale_info): check node type
	(extract_global_info): check node type

	* backends/xml-backend.c (entry_unset): deal with locales
	(entry_set): deal with locales
	(entry_value): locales
	(schema_node_extract_value): handle locales

	* gconf/gconf-internals.c (gconf_log): move the check for debug
	messages to the top of the function, before g_strdup_vprintf(),
	and if GCONF_ENABLE_DEBUG isn't defined return immediately (ignore
	the GCL_DEBUG messages).

1999-11-15  Havoc Pennington  <hp@pobox.com>

	* doc/gconf/tmpl/gconf-client.sgml: write GConfClient docs.

	* wrappers/gtk/gconf-client.c (gconf_client_new_with_engine):
	change this to increment the #GConfEngine reference count.

	* doc/gconf/gconf.sgml: Add GConfClient entity

	* doc/gconf/gconf-sections.txt: Add GConfClient stuff, add
	set_list and set_pair for GConfChangeSet

	* doc/gconf/gconf.types: New file gtk-doc requires

	* doc/gconf/Makefile.am (scan): Scan GConfClient as well. 
	Uses a bad, probably nonportable hack, but this stuff isn't 
	built by default anyway.

	* wrappers/Makefile.am: Build GConfClient if we have GNOME

1999-11-15  Havoc Pennington  <hp@pobox.com>

	* gconf/gconf.c (gconf_get): Fix it to use the current
	locale as documented.

	* gconf/gconf-internals.c
	(gconf_value_list_to_primitive_list_destructive): new function
	takes most code from gconf_get_list()
	(gconf_value_pair_to_primitive_pair_destructive): new function

	* wrappers/gtk/gconf-client.c (get): Return a copy of the cached
	value, should save us some segfaults.
	(gconf_client_get_list): new function
	(gconf_client_get_pair): new function
	(gconf_client_set_list): new function
	(gconf_client_set_pair): new function

	* gconf/gconf-internals.c (gconf_value_pair_from_primitive_pair):
	new function removes guts of gconf_set_pair()

	* gconf/gconf.c (gconf_set_list): change to use
	gconf_value_list_from_primitive_list()

	* gconf/gconf-changeset.c (gconf_change_set_set_list): new
	convenience function
	(gconf_change_set_set_pair): new function

	* gconf/gconf-internals.c (gconf_value_list_from_primitive_list):
	new function, takes most of the code from gconf_set_list() to
	share with other list-set wrappers

1999-11-14  Havoc Pennington  <hp@pobox.com>

	* backends/xml-backend.c (listify_foreach):  s/gconf_entry_new/gconf_entry_new_nocopy/

	* gconf/gconf.c (gconf_all_entries):  s/gconf_entry_new/gconf_entry_new_nocopy/

        * gconf/doc/*: tons of documentation updates.
	
	* gconf/gconf-changeset.c: Add an "in_foreach" flag and warn if
	you do bad things during a foreach operation.
	(gconf_change_set_remove): check that we aren't in a foreach
	(gconf_change_set_unref): if refcount == 0 check that we aren't in
	a foreach

	* gconf/gconf-changeset.h: try to spell "committed" right.

	* gconf/gconf-value.h (gconf_entry_value): add accessor macros 
	to GConfEntry.

	* gconf/gconf-value.c (gconf_entry_new_nocopy): Rename
	gconf_entry_new() to gconf_entry_new_nocopy() to reflect its 
	actual behavior.

1999-11-13  Havoc Pennington  <hp@pobox.com>

	* gconf/gconf-internals.h: move the value-from-string constructors
	here

	* gconf/gconf-value.h: moved from here

1999-11-13  Havoc Pennington  <hp@pobox.com>

	* gconf/gconf-value.h (gconf_meta_info_schema): Add const cast to
	this macro.

	* gconf/gconf.c (gconf_set_list): allow list of schemas
	(from_primitive): handle schemas
	(primitive_value): handle schemas
	(gconf_get_list): handle schemas

	* doc/gconf/tmpl/gconf-value.sgml: docs!

	* doc/gconf/tmpl/gconf.sgml: docs!

	* doc/gconf/gconf-sections.txt: add set/get list/pair

	* gconf/gconf.c (gconf_set_list): Fix dumb bug (assign back to the
	original list!)

1999-11-13  Havoc Pennington  <hp@pobox.com>

	* tests/testgconf.c (check_list_storage): Use the new list 
	convenience wrappers, to be sure they are tested. (the test
	reveals that right now they don't work ;-)

	* gconf/gconf.c (error_checked_set): destroy the error if it isn't
	passed out to the user, to avoid a mem leak
	(gconf_set_float): checks
	(gconf_set_int): checks
	(gconf_set_string): checks
	(gconf_set_bool): checks
	(gconf_set_bool): canonicalize the boolean value with !!
	(gconf_set_schema): checks

	* gconf/gconf-value.h (gconf_value_string): add const cast to this 
	macro

	* gconf/gconf.c (gconf_get_schema): add checks
	(gconf_get_bool): checks
	(gconf_get_string): checks
	(gconf_get_int): checks
	(gconf_get_float): checks
	(gconf_get_with_locale): checks
	(gconf_set): more checks
	(gconf_unset): checks
	(gconf_associate_schema): checks
	(gconf_all_dirs): checks
	(gconf_dir_exists): checks
	(gconf_get_list): New function, gets a list of native types 
	and avoids GConfValue.
	(gconf_get_pair): New function, gets a pair of native types
	(gconf_set_list): New function, sets a list of native types
	(gconf_set_pair): New function, sets a pair of native types
	
1999-11-12  Havoc Pennington  <hp@pobox.com>

	* doc/gconf/gconf.sgml: Set up the gtk-doc system. Added all the
	files for that.

1999-11-12  Havoc Pennington  <hp@pobox.com>

	* backends/xml-backend.c: Change all comments starting with /** to
	not start with that (for gtkdoc)

1999-11-12  Havoc Pennington  <hp@pobox.com>

	* gconf/gconftool.c (main): Add the ability to specify a
	configuration source other than the default configuration source
	stack.
	Add the ability to install a schema file.

	* gconf/Makefile.am (INCLUDES): add XML_CFLAGS
	(gconftool_LDADD): add XML_LIBS

	* backends/Makefile.am (INCLUDES): add XML_CFLAGS

1999-11-11  Havoc Pennington  <hp@pobox.com>

	* tests/testchangeset.c: test for the changeset stuff
	
	* gconf/gconf.c (gconf_set): add check that string values don't
	contain a NULL string	

	* gconf/gconf-changeset.c (gconf_change_set_unset): fix typo

        * doc/gconf.sgml: tweaks
	
	* gconf/gconf-changeset.c, gconf/gconf-changeset.h: ChangeSet data
	structure stores a bunch of changes to be committed in a block.
	For now the gconf_commit_change_set() function is really naive
	(iterates over the change set and sets each value)

	* backends/xml-backend.c: Throughout, use accessor functions to 
	access the "value" field in the cache entries; we're going to 
	have to update the value field to match the proper locale
	before supplying it via the entry_value() accessor.

1999-11-11  Havoc Pennington  <hp@pobox.com>

	* tests/runtests.sh: Enhance to detect missing tests.

	* gconf/gconf-internals.c (gconf_log): don't log DEBUG level stuff 
	if built without GCONF_ENABLE_DEBUG

	* backends/xml-backend.c (safe_g_hash_table_insert): Same, use
	GCONF_ENABLE_DEBUG
	Add locales stuff throughout this file, but do nothing with it for
	now.

	* gconf/gconfd.c (safe_g_hash_table_insert): Make this dependent
	on GCONF_ENABLE_DEBUG setting.

	* gconf/gconf-sources.c (gconf_sources_query_value): fix locale
	(gconf_sources_unset_value): locale
	(gconf_sources_all_entries): locales

	* gconf/gconfd.c (context_query_value): Use locale list
	(context_unset): locale argument
	(context_all_entries): locale argument
	(gconfd_unset_with_locale): locale

	* gconf/gconf-sources.c (gconf_source_query_value): Pass an array
	of locales to look for
	(gconf_source_all_entries): ditto
	(gconf_source_unset_value): pass locale to unset

	* gconf/gconf-backend.h: Add locale args to the backend functions
	that need it

	* gconf/gconf-internals.c (gconf_current_locale): Use setlocale()
	again, not guess_category_value from gnome-i18n

1999-11-10  Havoc Pennington  <hp@pobox.com>

	* gconf/Makefile.am (gconfd_SOURCES): Move the locale stuff here;
	decided not to use it in backends, so it can be in gconfd not the
	library.

	* gconf/gconfd.c (one_hour_timeout): Expire old locale cache stuff
	(locale_cache_lookup): New function to look stuff up in the locale
	cache. 
	(main): free the locale cache on exit

1999-11-10  Havoc Pennington  <hp@pobox.com>

	* backends/xml-backend.c (free_childs): function to free children
	of a node.
	(xentry_set_value): free_childs() in a couple places we weren't

	* tests/testschemas.c: Add new schema test to check for storing a
	blank schema

	* gconf/gconf-locale.c, gconf/gconf-locale.h: New module, creates
	and caches the list of locales to search for given an environment
	variable value

	* gconf/gconf-internals.c (gconf_current_locale): We want
	LC_MESSAGES not LC_ALL

1999-11-07  Havoc Pennington  <hp@pobox.com>

	* gconf/gconf.c (reinstall_listeners_for_all_engines): Function to
	iterate over all engines and do the context
	reinstallation. However, it's not used yet because we also need 
	to regenerate the context IDs.

	* gconf/gconfd.c: Add a ConfigServer_Context field to GConfContext
	(register_context): fill in the ConfigServer_Context field
	(context_new): init context field to invalid context

	* gconf/gconf.c (register_engine): Keep a hash from context ID's 
	to GConfEngine, because we no longer have the global connection 
	table (that table was broken anyway).
	(gconf_engine_blank): new function shared by the GConfEngine
	constructors (contains previous contents of gconf_engine_new, 
	separate function required by registration stuff)
	(gconf_engine_new): Create blank engine, then register it
	(gconf_engine_new_from_address): register the engine
	(gconf_engine_unref): unregister the engine

	* gconf/GConf.idl: Add a context ID to the argument
	list of the notification.

	* gconf/gconf.c (gconf_server_broken): New predicate, asks if an
	exception is set indicating that our server is hosed.
	(gconf_detach_config_server): Function to release the server
	object reference and set it to nil
	(gconf_engine_new_from_address): Detach server and retry if
	appropriate.
	(gconf_notify_add): Detach and respawn if needed
	(gconf_notify_remove): ditto
	(gconf_set): ditto
	(gconf_associate_schema): ditto
	(gconf_unset): ditto
	(gconf_all_entries): ditto
	(gconf_all_dirs): ditto
	(gconf_suggest_sync): ditto
	(gconf_notify_add): remove debugging spew
	(gconf_cnxn_new): Add namespace_section to GConfCnxn struct
	(gconf_cnxn_destroy): free namespace_section
	(GConfEnginePrivate): Put the connection table in here, it is
	per-context (and thus per-GConfEngine), should not be global.
	(gconf_init): don't create CnxnTable here, create it for each engine.
	(gconf_engine_new_from_address): remove redundant refcount
	initialization
	(gconf_engine_unref): Destroy CnxnTable, and free the engine
	struct itself.
	(notify): remove debug spew, reflect new signature of notify function

1999-11-07  Havoc Pennington  <hp@pobox.com>

	* gconf/gconf-internals.c: #include <locale.h>, oops

1999-11-07  Havoc Pennington  <hp@pobox.com>

	* tests/testschemas.c (check_schema_storage): Properly consider
	that schema fields can be NULL

	* backends/xml-backend.c (entry_value): Properly consider that
	a schema can have a NULL locale

	* gconf/gconf.c (gconf_get_with_locale): New function
	(gconf_get): just calls get_with_locale() with a NULL locale
	(gconf_get_schema): Use get_with_locale()

	* gconf/gconf-internals.c (gconf_current_locale): So I don't have
	to think about setlocale()

	* tests/testschemas.c: New test program for schema stuff
	
1999-11-06  Havoc Pennington  <hp@pobox.com>

	* gconf/gconf.c (gconf_associate_schema): Add function to associate 
	a schema name with a key.

1999-10-28  Havoc Pennington  <hp@pobox.com>

	* backends/xml-backend.c (query_value): Add locale
	(dir_get_value): add locale
	(entry_value): new function gets the value from an entry, 
	looking up a new value by locale if necessary.

	(xentry_extract_value): locale argument added, but needs to 
	be implemented.

	* gconf/gconf-backend.h: Add locale to query_value in vtable

	* gconf/gconf-sources.c (gconf_source_query_value): Add locale
	(gconf_sources_query_value): Add locale

	* gconf/gconfd.c (gconfd_lookup_with_locale): Implement new 
	IDL method
	(context_query_value): Add locale

	* gconf/GConf.idl: Add lookup_with_locale() method

	* gconf/gconf-internals.c (fill_corba_schema_from_gconf_schema): 
	Handle case where some schema fields are NULL, handle locale field.
	(gconf_schema_from_corba_schema): Handle locale field.

	* gconf/gconf-schema.c (gconf_schema_set_locale): New function

	* gconf/gconftool.c: Clean up so it is easier to deal with

1999-10-28  Havoc Pennington  <hp@pobox.com>

	* gconf/gconfd.c: Rework the sync code; now, any change queues a
	sync in 1 minute. If a client calls suggest_sync(), we sync in an
	idle (as soon as the event loop quiets down). Also, we now sync 
	on shutdown.

	* tests/testgconf.c: Fix to compile

	* tests/Makefile.am (testgconf_LDADD): Fix Makefile.am to use new
	library name

1999-10-27  Havoc Pennington  <hp@pobox.com>

	* configure.in: Add --enable-debug option to G_DISABLE_CHECKS as needed

        * gconf/wrappers/gtk/testgconfclient.c: Test program for the GTK+ 
	client wrapper.
	
	* gconf/gconf-sources.c (gconf_sources_query_value): 
	Wasn't handling errors; now we report errors. The bad thing is,
	it might be better to go ahead and do our best despite the error.

	* gconf/gconf.c (gconf_init): Actually set the have_initted variable.	

	* wrappers/gtk/Makefile.am (libgconf_gtk_la_LIBADD): Don't try to 
	link with libgconf;
	Add testgconfclient target.

	* wrappers/gtk/gconf-client.h, wrappers/gtk/gconf-client.c: Make
	it compile
	
	* configure.in: Generate Makefile for GtkObject wrapper

1999-10-27  Havoc Pennington  <hp@pobox.com>

	* gconf-editor/Makefile.am (gconf_editor_LDADD): 
	link to libgconf.la

	* gconf/Makefile.am: Renamed the shared lib to libgconf instead of
	libgconf-client.
	
	* wrappers/gtk/Makefile.am: Renamed gconf-gtk.[hc] to
	gconf-client.[hc] via CVS surgery, then updated Makefile.

1999-10-21  Havoc Pennington  <hp@pobox.com>

	* gconf/gconf.c (gconf_key_is_below): New function, tells you if a
	key is below another key in the directory hierarchy.

1999-10-20  Havoc Pennington  <hp@pobox.com>

	* gconf/gconfd.c, gconf/gconf-sources.c: Finish stuff from the
	17th (use GConfError throughout, etc.)

	* gconf/gconfd-error.h, gconf/gconfd-error.c: Remove the broken
	old error stuff, even gconfd no longer uses it.
	
1999-10-17  Havoc Pennington  <hp@pobox.com>

	* gconf/gconf-sources.c: Use GConfError** throughout, make the
	_source_ functions static
	(gconf_sources_query_value): Use the new flags and readable
	function
	(gconf_sources_set_value): use the new flags and writeable
	function

	* gconf/gconf-error.c (gconf_error_copy): new function
	(gconf_compose_errors): new function

        * backends/xml-backend.c: Throughout, use a GConfError** argument
	instead of the global errno thing
	
	* gconf/gconf-error.c (gconf_set_error): New function properly
	handles a GConfError** by setting error or ignoring if NULL, 
	also warns if you "stack" two errors on top of each other.
	(gconf_clear_error): New function clears a GConfError** 

	* gconf/gconfd.c: don't include gconfd-error.h

	* backends/xml-backend.c: Remove inclusion of gconfd-error.h

	* gconf/gconf-backend.h: Add lock/unlock and readable/writeable
	functions to the backend vtable, and add error arguments to 
	all functions in the vtable.

	* gconf/gconfd.c (safe_g_hash_table_insert): priority GCL_WARNING

	* backends/xml-backend.c (safe_g_hash_table_insert): make
	it priority GCL_WARNING.

	* gconf/gconf-sources.h: GCONF_SOURCE_ALL_WRITEABLE,
	GCONF_SOURCE_ALL_READABLE flags to short-circuit calls to the new
	writeable/readable vtable functions.

1999-10-17  Havoc Pennington  <hp@pobox.com>

	* gconf/gconf-orbit.h: Include orb/orbit.h instead of GConf.h

1999-10-17  Havoc Pennington  <hp@pobox.com>

	* backends/xml-backend.c: Use %gconf.xml instead of .gconf.xml 
	for the magic files.

1999-10-17  Havoc Pennington  <hp@pobox.com>

	* tests/runtests.sh: Make this script work

	* gconf/gconftool.c: Don't use -s for --spawn, since it's used for
	--set.

	* gconf/gconf.c (gconf_get_config_server): Clear the error
	from the initial ping if we're asked to start the server.
	(gconf_engine_unref): No error spew if server is down when 
	the engine is destroyed.

	Throughout: Make sure error is set but don't require a 
	specific error type

	* gconf/gconf-internals.c (gconf_read_server_ior): Set error 
	if the server info file doesn't exist

	* gconf/gconf.c (try_to_contact_server): Add a check for setting 
	the error properly

	* gconf/gconftool.c (main): Switch to gconf_suggest_sync()
	instead of gconf_sync()

	* gconf/gconfd.c: Add a GConfContext::sync_idle field, to 
	store the source ID of an idle function that performs a sync.
	(context_destroy): Remove the sync idle 
	(context_hibernate): Check that sync idle is 0
	(context_sync): Add the sync idle if it doesn't exist

	* gconf/gconf.c (gconf_suggest_sync): gconf_sync() renamed to
	gconf_suggest_sync(), because a sync is for all clients;
	suggest_sync() means "I just finished a large block of operations,
	so I'm suggesting that it would be efficient and data-preserving
	to schedule a sync in the near future." gconf_sync() didn't 
	make much sense because it was global, not per-client.
	
1999-10-17  Havoc Pennington  <hp@pobox.com>

	* For all files, s/G_CONF/GCONF

1999-10-12  Havoc Pennington  <hp@pobox.com>

	* gconf/gconfd.c: Use GConfListeners to handle listener
	registration and notification

1999-10-12  Havoc Pennington  <hp@pobox.com>
	
	* gconf/gconf-listeners.c (ltable_insert): Was failing to init 
	the node in the flat array of nodes if the listener location 
	was NULL. 
	(gconf_listeners_count): new function reports number of listeners
	(ltable_new): init next_cnxn to 1 instead of 0 
	(ltable_remove): Do a better job of cleaning up dead 
	tree nodes (go up looking for empty parent nodes)
	(ltable_destroy): type error, was calling listener_destroy() 
	on the GNodes. Oops. fixed, now use g_node_traverse() to 
	destroy the node contents.
	(ltable_new): don't create the root node until it's needed
	(ltable_insert): add root node here if needed
	(ltable_remove): zero lt->tree if we destroy it
	
	* tests/testlisteners.c: New test program for GConfListeners, 
	fairly comprehensive

	* tests/Makefile.am: add testlisteners, put EFENCE at the end of 
	the link line

1999-10-12  Havoc Pennington  <hp@pobox.com>

	* gconf/Makefile.am: Fixes - remove some public headers from
	libgconf_client_SOURCES, look for GConf.idl in $(srcdir) (bug from
	Wichert Akkerman)

	* gconf/gconf-listeners.h, gconf/gconf-listeners.c: New files,
	compile but are not tested. Moves listener tree interface into 
	a public header to re-use in GTK+ wrapper.

1999-10-11  Havoc Pennington  <hp@pobox.com>

	* For all files, s/g_conf/gconf

1999-10-05  Havoc Pennington  <hp@pobox.com>

	* tests/testgconf.c (check_list_storage): Add checks for empty
	lists, and all the various list types.

	* gconf/gconf-value.c (g_conf_value_to_string): Fix a segfault
	(not always allocating a large enough buffer)

1999-10-05  Havoc Pennington  <hp@pobox.com>

	* configure.in: 0.3, bump soname

1999-10-04  Havoc Pennington  <hp@pobox.com>

	* tests/testgconf.c (main): Add checks for getting/setting lists,
	bools, floats, and ints

	* gconf/gconf-internals.c (fill_corba_value_from_g_conf_value): We
	have to set the release flag on a sequence inside a union, since
	the sequence isn't default initialized as it normally would be.
	Plugs a big memory leak (all sequence buffers).

	* backends/xml-backend.c (dir_fill_cache_from_doc): Plug a leak
	where we set entry->name and then reset it in entry_fill()
	(entry_destroy): Free entry->mod_user
	(x_shutdown): Renamed shutdown() to x_shutdown() to avoid
	namespace clash with some libcs. Bug report from Bjorn Andersson
	<ban@lifix.fi>.

	* gconf/gconf-internals.c (g_conf_log): Plug memory leak (not
	freeing log string)

	* gconf/gconfd.c (gconfd_set): Plug memory leak (not freeing the GConfValue)

	* tests/Makefile.am: Make testgconf noinst

	* gconf/gconfd.c (main): check GCONFD_NO_DAEMON environment
	variable to run in no-daemon mode for debugging. Needless to say 
	this does NOT work if you are trying to use gconf for real.

	* gconf/gconf-internals.c (fill_corba_value_from_g_conf_value):
	Fill in the list type in the CORBA value
	(g_conf_value_from_corba_value): Fill in the list type in the 
	GConfValue

	* gconf/GConf.idl: Create ConfigList type to past the list type 
	along with the sequence of values

	* gconf/gconf-value.c (g_conf_value_set_list): New function, list
	setter that copies the list

	* gconf/gconf.c (g_conf_unset, g_conf_set): return boolean to
	indicate success

	* gconf/gconf-value.c (g_conf_value_new_from_string): Rewrite the
	bool string parser with switch, accept y/n as values.

1999-10-01  Havoc Pennington  <hp@pobox.com>

	* gconf/gconf-sources.c (g_conf_sources_query_value): Check for 
	errors when we query the default value from the schema.

	* backends/xml-backend.c (entry_fill): If the schema key for a key is 
	invalid, don't load it.

1999-09-30  Havoc Pennington  <hp@pobox.com>

	* gconf/gconf-sources.c (g_conf_key_check_hack): Clear error 
	before we check the key

	* backends/xml-backend.c (dir_unset_value): Actually set the
	entry's value to NULL
	(entry_destroy): check whether Entry::value is NULL. Not sure 
	why I didn't check; I think NULL is allowed, but if not 
	we will have problems I guess.

	* tests/testgconf.c: Easiest to just write the test suite in
	C. Tests set/get and unset for strings so far.

1999-09-29  Havoc Pennington  <hp@pobox.com>

	* gconf/gconf.sgml: Update docs

1999-09-29  Havoc Pennington  <hp@pobox.com>

	* gconf/gconf-conf.h: Replaced with gconf-engine.h

	* gconf/Makefile.am: use gconf-engine.h

	* gconf/gconf.c, gconf/gconf.h, gconf/gconftool.c,
	gconf-editor/app.c, wrappers/guile/scm-gconf.c: 
	Use GConfEngine name instead of GConf

1999-09-29  Rodrigo Stulzer Lopes <rodrigo@conectiva.com.br>

	* configure.in: added pt_BR to ALL_LINGUAS

1999-09-29  Havoc Pennington  <hp@pobox.com>

	* backends/xml-backend.c: include gconfd-error.h and gconf.h, 
	change error checking to new system as needed

	* gconf/Makefile.am: Put more stuff in gconfd_SOURCES instead of
	client lib, add new files

	* gconf/gconf-backend.h: include gconf-sources.h

	* gconf/gconf-conf.h: add error arg to g_conf_new_from_address

	* gconf/gconf-error.c: move strerror in here, fixups,
	preconditions

	* gconf/gconf-internals.c, gconf/gconf-sources.c: move all sources
	stuff to new gconf-sources file

	* gconf/gconf-orbit.c: Check for failure to get lock

	* All the rest of this giant diff: Move to new error-handling
	scheme
	
1999-09-26  Havoc Pennington  <hp@pobox.com>

	* gconf/Makefile.am: add gconf-error.h, gconf-conf.h headers,
	gconf-value.c file

	* gconf/gconf-error.h, gconf/gconf-conf.h, gconf/gconf-value.c: 
	New files, just rearranging old files, no new code (well, there is 
	a new GConfError object but it's unused)

	* gconf/gconf-internals.c: Move the value, metainfo, and entry
	datatypes to gconf-value.c

	* gconf/gconf.c, gconf/gconf.h: Remove appname argument from
	g_conf_init(), remove g_conf_global_appname() function.

	* gconf/gconftool.c: don't pass appname to g_conf_init()

	* gconf-editor/gconf-editor.c: Ditto
	
1999-09-25  Kjartan Maraas  <kmaraas@online.no>

	* configure.in: Added "da" to ALL_LINGUAS.
	
1999-09-19  Havoc Pennington  <hp@pobox.com>

	* NEWS, README: put something in here

	* Makefile.am: conditionally include gconf-editor if we have 
	GNOME

	* autogen.sh: make it more like "macros" autogen.sh
	
	* configure.in: manually check for GNOME instead of using
	"macros"
	
	* macros, intl: remove these subdirs, autogen.sh now
	generates intl

	* gconf/gconf.c: fix array size for strerror messages

	* gconf-editor/Makefile.am: use new GNOME variables

	* gconf-editor/gconf-editor.c: use new g_conf_init() 
	signature

	* gconf-editor/menus.h, gconf-editor/menus.c: These 
	hadn't been added
	
1999-09-19  Havoc Pennington  <hp@pobox.com>

	* gconf/gconf.h: Add G_CONF_OVERRIDDEN error if you try to 
	set a value which will have no effect due to a read-only
	setting earlier in the path.

	* gconf/gconf.c: Add G_CONF_OVERRIDDEN to strerror, etc.

	* gconf/GConf.idl: add ConfigOverridden to pass it across the
	CORBA link

	* doc/gconf.sgml: Add more stuff to docs
	
1999-09-17  Havoc Pennington  <hp@pobox.com>

	* gconf/gconf-internals.c (subst_variables): Add a new function to
	perform variable substitution on addresses in the path file. 
	Supports $(HOME), $(USER), and $(ENV_ANYENVVARNAME)

	* Makefile.am: Add "doc" subdir

	* doc/Makefile.am: Added

	* doc/gconf.sgml: write more docs
	
1999-09-03  Havoc Pennington  <hp@pobox.com>

	* configure.in: Set library version info variables, and locate
	Guile libraries, etc.	

	* wrappers/Makefile.am: conditionally build Guile subdir if we
	found guile.

	* wrappers/guile: new subdir with the basic files/build for Guile 
	bindings, will add the actual bindings later. 
	
1999-09-03  Havoc Pennington  <hp@pobox.com>

	* configure.in: set POPT_LIBS instead of adding -lpopt to generic
	LDFLAGS; this was causing libtool to fail to generate the .so 
	file for the XML backend module.

	* gconf/Makefile.am: use POPT_LIBS

	* gconf/gconf-backend.c: change some g_warning to g_conf_log

1999-09-03  Havoc Pennington  <hp@pobox.com>

	* gconf/gconfd.c: Every hour or so, hibernate all contexts that
	haven't been accessed in 45 minutes. Make some assorted changes
	to support that.

1999-09-02  Havoc Pennington  <hp@pobox.com>

	* gconf/gconf-internals.h, gconf/gconf-internals.c: Add a new
	g_conf_log() function for logging errors in backends; 
	for now this wraps syslog() but if we eventually have non-daemon
	direct access to backends, we will need to change it. Use
	g_conf_log() throughout this file instead of printf() and
	g_warning().

	* gconf/backends/xml-backend.c: Install a timeout which cleans
	old stuff out of the cache every 5 minutes; use g_conf_log 
	to report problems.

	* gconf/gconfd.c: Use g_conf_log(); log "exiting" later than we 
	had been, after shutting everything down. 

1999-09-02  Havoc Pennington  <hp@pobox.com>

	* backends/Makefile.am: Install backends in $(libdir)/gconf

	* gconf/Makefile.am: Look for backends in $(libdir)/gconf

	* gconf/gconf-backend.c (g_conf_backend_file): Use
	g_module_build_path() to build the module path

        * gconf/gconf-orbit.c (g_conf_get_cookie_reliably): Make the 
	~/.gconfd directory if necessary.

	Lots of error-checking added.

	* gconf/gconfd.c: Mark a lot of strings for translation; include 
	username in the syslog spew.

1999-09-02  Havoc Pennington  <hp@pobox.com>

	* gconf/gconfd.c (main): If the orb init fails, syslog the 
	GConf error.

	* gconf/gconf-orbit.c: Add tons of error checks/reports

1999-09-01  Tim P. Gerla  <timg@means.net>

	* configure.in: Added test for popt.

1999-09-01  Havoc Pennington  <hp@pobox.com>

	* backends/xml-backend.c (dir_get_value): Fix a segfault, check
	that an Entry != NULL before dereferencing it

	* GConf.idl: Add ConfigException and ConfigErrorType to pass
	errors from server to client

	* gconf.c (g_conf_handle_corba_exception): set the GConf error
	based on CORBA error, if any, and free the exception. 
	Use throughout the file to receive server errors. 

	* gconfd.c (g_conf_set_exception): set the CORBA exception based
	on the GConf error, if any. Use this function throughout the file
	to send errors to clients. 
	(g_conf_nuke_dir): Remove this obsolete function
	(context_set): don't notify listeners of a change if an error
	occurred

1999-09-01  Havoc Pennington  <hp@pobox.com>

	* configure.in: add gmodule check to AM_PATH_GLIB, add an error if
	glib isn't found, use detected $XML_CONFIG to instead of
	xml-config, AC_PATH_PROG orbit-config, check for C++ compiler
	(since we'll have a C++ wrapper soon)

	* gconf/Makefile.am: Assume GMODULE_CFLAGS are now included in
	GLIB_CFLAGS since we fixed configure.in

	* gconf/gconf.c, gconf/gconf.h: Reference count the GConf object, 
	add extern "C" when using C++

	* gconf/gconftool.c: unref instead of destroying the GConf object

1999-08-31  Dave Camp  <campd@oit.edu>

	* gconf/gconf.c (g_conf_is_initialized): New function.

1999-08-31  Dave Camp  <campd@oit.edu>

	* gconf/gconftool.c (main): Changed --dir-exists to return 0 if 
	the dir exists, and 2 if it does not.

1999-08-31  Dave Camp  <campd@oit.edu>

	* gconf/gconftool.c (options): Added "--dir-exists".
	(main): If dir_exists is on the command line, check if the argument dir
	exists.

	* gconf/gconfd.c (server_epv): Added gconfd_dir_exists.
	(gconfd_dir_exists): New function.
	(context_dir_exists): New function.

	* gconf/gconf.c (g_conf_dir_exists): New function.

	* gconf/gconf-internals.c (g_conf_sources_dir_exists): New function.
	(g_conf_source_dir_exists): New function.

	* gconf/gconf-backend.h (GConfBackendVTable): Added a dir_exists 
	entry. 

	* gconf/GConf.idl (dir_exists): New function.

	* backends/xml-backend.c (dir_exists): New function.
	(xml_vtable): Added dir_exists.

1999-08-30  Dave Camp  <campd@oit.edu>

	* gconf/gconf.h: #include gconf-orbit.h.

	* gconf/Makefile.am (gconfinclude_HEADERS): Install gconf-orbit.h,
	GConf.h

1999-08-29  Dave Camp  <campd@oit.edu>

	* Makefile.am (bin_SCRIPTS): Install gconf-config.

	* configure.in (AC_OUTPUT): Create gconf-config. 

	* gconf/Makefile.am: Install gconf.h and gconf-schema.h.
	

1999-08-29  Dave Camp  <campd@oit.edu>

	* configure.in (XML_LIBS): Use xml-config.

1999-08-29  Kjartan Maraas  <kmaraas@online.no>

	* configure.in: Added "no" to ALL_LINGUAS
