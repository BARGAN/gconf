
// Really, this whole interface should be used only via the GConf 
// client library. I reserve the right to change it whenever I feel 
// like it. So there.

enum ConfigValueType { InvalidVal,  IntVal, StringVal, FloatVal, BoolVal };

union ConfigValue switch (ConfigValueType) {
 case InvalidVal:
   long dummy;
 case IntVal: 
   long int_value;
 case StringVal:
   string string_value;
 case FloatVal:
   float float_value;
 case BoolVal:
   boolean bool_value;
};

interface ConfigListener {
  oneway void notify (in unsigned long cnxn, in string key, in ConfigValue value);

};

interface ConfigServer {
  typedef sequence<string> KeyList;
  typedef sequence<ConfigValue> ValueList;

  // "where" is the portion of the namespace to listen to
  // Returns a connection ID for removal
  unsigned long add_listener(in string where, in ConfigListener who);  

  void remove_listener(in unsigned long cnxn);
  
  ConfigValue lookup(in string key);

  void set(in string key, in ConfigValue value);

  void all_pairs(in string dir, 
                 out KeyList keys,
                 out ValueList values);

  void all_dirs(in string dir,
                out KeyList subdirs);

  void sync();

  // Internal use
  long ping();

  void shutdown();
};



