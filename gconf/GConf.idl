
// Really, this whole interface should be used only via the GConf 
// client library. I reserve the right to change it whenever I feel 
// like it. So there.

enum ConfigValueType { InvalidVal, IntVal, StringVal, FloatVal, BoolVal, SchemaVal, ListVal, PairVal };

struct ConfigSchema {
  ConfigValueType value_type;
  string short_desc;
  string long_desc;
  string owner;
};

union ConfigValue switch (ConfigValueType) {
 case InvalidVal:
   long dummy;
 case IntVal: 
   long int_value;
 case StringVal:
   string string_value;
 case FloatVal:
   float float_value;
 case BoolVal:
   boolean bool_value;
   // hope this doesn't slow down transmission of smaller types 
 case SchemaVal:
   ConfigSchema schema_value;
};

interface ConfigListener {
  oneway void notify (in unsigned long cnxn, in string key, in ConfigValue value);

};

interface ConfigServer {
  typedef sequence<string> KeyList;
  typedef sequence<ConfigValue> ValueList;
  typedef unsigned long Context;
  
  const Context invalid_context = 0;
  // user's preferred config database
  const Context default_context = 1;

  // Use a specific address instead of the default database;
  // invalid_context returned on failure.
  Context get_context(in string address);
  
  // "where" is the portion of the namespace to listen to
  // Returns a connection ID for removal
  unsigned long add_listener(in Context ctx, in string where, in ConfigListener who);  

  void remove_listener(in Context ctx, in unsigned long cnxn);
  
  ConfigValue lookup(in Context ctx, in string key);

  void set(in Context ctx, in string key, in ConfigValue value);

  void unset(in Context ctx, in string key);

  void remove_dir(in Context ctx, in string dir);

  void nuke_dir(in Context ctx, in string dir);

  void all_entries(in Context ctx,
                   in string dir, 
                   out KeyList keys,
                   out ValueList values);

  void all_dirs(in Context ctx,
                in string dir,
                out KeyList subdirs);

  // if first arg is a key, second arg should be a key pointing
  //  to a schema. 
  // if first arg is a dir, second arg should be a key pointing 
  //  to a dir full of schemas.
  void set_schema(in Context ctx,
                  in string key,
                  in string schema_key);

  void sync(in Context ctx);

  // Internal use
  long ping();

  void shutdown();
};



