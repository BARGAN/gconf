<!-- ##### SECTION Title ##### -->
GConfError

<!-- ##### SECTION Short_Description ##### -->

error reporting.

<!-- ##### SECTION Long_Description ##### -->
<para>
The #GConfError object is used to report errors that occur in GConf
library routines. All functions that report errors work the same way:
<itemizedlist>
<listitem>
<para>
The last argument to the function is a #GConfError**, a pointer to a
location where a #GConfError* can be placed.
</para>
</listitem>
<listitem>
<para>
This last argument may be <symbol>NULL</symbol>, in which case no
error will be returned.
</para>
</listitem>
<listitem>
<para>
If non-<symbol>NULL</symbol>, the argument should be the address of a 
#GConfError* variable, which should be initialized to
<symbol>NULL</symbol>. 
</para>
</listitem>
<listitem>
<para>
If an error occurs, a #GConfError will be allocated and placed in the
return location; the caller must free the #GConfError with
gconf_error_destroy(). If no error occurs, the return location will be
left untouched. That is, the test <literal>error != NULL</literal> 
should always be a reliable indicator of whether the operation failed.
</para>
</listitem>
</itemizedlist>
</para>

<para>
It's also common that the return value of a function indicates whether
or not an error occurred. Typically, <symbol>TRUE</symbol> is returned
on success. In some cases, a <symbol>NULL</symbol> return value
indicates failure. Either way, if the return value indicates failure
and you passed a non-<symbol>NULL</symbol> value for the last argument
to the function, a #GConfError will be returned. If the return value
indicates success, then a #GConfError will never be returned.  These
relationships are guaranteed; that is, you can reliably use the return
value to decide whether a #GConfError was placed in the return
location. If a function does <emphasis>not</emphasis> indicate
success/failure by return value, you must check whether the
#GConfError is <symbol>NULL</symbol> to detect errors.
</para>

<para>
Here's a short error handling example:
<programlisting>
  GConfError* err = NULL;

  if (!gconf_init(&amp;err))
    {
      fprintf(stderr, _("Failed to init GConf: %s\n"), err->str);
      gconf_error_destroy(err); 
      err = NULL;
    }
</programlisting>
</para>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### ENUM GConfErrNo ##### -->
<para>
The #GConfErrNo enumeration allows client applications to
differentiate between different kinds of error. You may wish to take
specific actions depending on the error type.
</para>

@GCONF_ERROR_SUCCESS: indicates that no error occurred, won't be returned in a #GConfError.
@GCONF_ERROR_FAILED: indicates failure, but no more specific #GConfErrNo applied.
@GCONF_ERROR_NO_SERVER: indicates that the GConf server couldn't be contacted, probably a CORBA problem.
@GCONF_ERROR_NO_PERMISSION: indicates that permission to access some resource was denied.
@GCONF_ERROR_BAD_ADDRESS: indicates that a configuration source address was syntactically invalid or impossible to resolve.
@GCONF_ERROR_BAD_KEY: indicates that a key was malformed.
@GCONF_ERROR_PARSE_ERROR: indicates that some parsing was done (perhaps in a backend) and it failed.
@GCONF_ERROR_CORRUPT: indicates that some part of the database is corrupt.
@GCONF_ERROR_TYPE_MISMATCH: indicates that a specific type was required, and another type was found.
@GCONF_ERROR_IS_DIR: indicates that an operation only applicable to keys was performed on a directory.
@GCONF_ERROR_IS_KEY: indicates that an operation only applicable to directories was performed on a key.
@GCONF_ERROR_OVERRIDDEN: indicates that the administrator has imposed a mandatory value, and it could not be changed.
@GCONF_ERROR_OAF_ERROR: 
@GCONF_ERROR_LOCAL_ENGINE: 
@GCONF_ERROR_LOCK_FAILED: 

<!-- ##### STRUCT GConfError ##### -->
<para>
This structure describes an error. The @str field gives a
human-readable description of the problem; the string is intended for
display to users. It will be internationalized and as informative as
possible. The @num field is intended for programs that want to
distinguish between different kinds of error. The @num and @str fields
are meant to be accessed directly, because it's convenient to write
err->num and err->str.
</para>

@str: the error description.
@num: the error number.

<!-- ##### FUNCTION gconf_error_new ##### -->
<para>
Creates a new error. Normally the GConf library does this, but you
might find a reason to do it as well. @en is the error number, @format
is a printf()-style format for the error message, and the variable
argument list is the same as in printf(). 
</para>

@en: the error number.
@format: printf()-style format for error description.
@Varargs: arguments required by the @format.
@Returns: newly-allocated #GConfError.


<!-- ##### FUNCTION gconf_error_copy ##### -->
<para>
Copies a #GConfError.
</para>

@err: a #GConfError to copy.
@Returns: a new #GConfError.


<!-- ##### FUNCTION gconf_error_destroy ##### -->
<para>
Destroys a #GConfError. You must destroy any errors returned by GConf
functions.
</para>

@err: a #GConfError to destroy.


<!-- ##### FUNCTION gconf_set_error ##### -->
<para>
Internal function.
</para>

@err: 
@en: 
@format: 
@Varargs: 


<!-- ##### FUNCTION gconf_clear_error ##### -->
<para>
Internal function.
</para>

@err: 


<!-- ##### FUNCTION gconf_compose_errors ##### -->
<para>
Internal function.
</para>

@err1: 
@err2: 
@Returns: 


<!-- ##### FUNCTION gconf_strerror ##### -->
<para>
Internal function.
</para>

@en: 
@Returns: 


